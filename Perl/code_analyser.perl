#!/usr/bin/perl
# Author: Yuhao Wu
# CGI Perl script

use CGI qw(-utf-8 :all *table);
use LWP::Simple qw(get);
binmode(STDOUT, ":encoding(utf-8)");

print header(- charset =>'utf-8 '), "\n",
	  start_html ({- title =>'Code Analysis',
	      		   - author =>'rhaegar425@gmail.com'});


print start_form({-method=>"POST",
                  -action=>"http://cgi.csc.liv.ac.uk/cgi-bin/cgiwrap/x7yw2/analysis"});
print h5("Input URL "), "\n";
# print label("URL: ");
print textfield({-name=>'URL',
			 	 -size=>150}), "\n";
print br(), "\n";
print h5("Input Code"), "\n";
# print label("Code: ");
print textarea({-name =>'code',
	            #-default=>'[Enter anything you want here]',
				-rows => 15,
				-cols => 100});
print br(), "\n";
print br(), submit({-name =>'submit',
			  		-value =>'Submit'}), "\n";
print end_form;

@single_comments;
@multiline_comments;
$instruction_lines_num = 0;
$instruction_elements_num = 0;
$nonempty_comments_num = 0; # sum of the numbers of single-line comments and multi-line comments
$non_trivial_comments_num = 0;
$comment_words_num = 0;
$comment_to_instruction_ratio = 0;
$nontrivial_comment_to_instruction_ratio = 0;
$comment_word_to_instruction_element_ratio = 0;

if(param('submit')){

	if((param('URL') && !param('code')) || (param('code') && !param('URL'))){

		if (param('URL')) {

				# This branch is executed if the user first visits this page / script, 
				# input username is undef
				# This branch is executed if the client request is generated by the form
				
				# Retrieve content from URL here and assign it to $text
				$text = get(param('URL'));
				if(defined($text)){ # No assignment, defined() -> false
					print h6("Content of ".param('URL')), "\n";
					print $text;

					@single_comments = get_single_comments($text);
					#print br(), h6("<br>Single comments are:<br> "), join("<br> ", @single_comments); 
					
					
					@multiline_comments = get_multiline_comments($text);
					#print br(), h6("<br>Multi-line comments are:<br> "), join("<br>", @multiline_comments); 
					 
					$nonempty_comments_num = count_nonempty_comments();
					

					print br(), h6("Non-trivial comments numbers: ");
					$non_trivial_comments_num = count_nontrivial_comments();
					#print "<br>total non-trivial comments: ", $non_trivial_comments_num;
					
					print br(),br(), h6("All words in all comments: <br>");
					
					# $_ =~ s/(lt|br|gt)//g; # replace <br>
					$comment_words_num = get_comment_words("@single_comments"."@multiline_comments");

					print br(), h4("After removing comments, # of rest program code lines: ");
					$instruction_lines_num = count_instruction_lines_num($text);
					print "Line numbers: ",$instruction_lines_num, br();


					print br(), h6("elements in instructions: <br>");
					$instruction_elements_num = count_elements(get_program_words($text));
					print "Total: ", $instruction_elements_num, br();
					print join(", ", get_program_words($text));
			
					build_table();
				}else{
					print h3("Error: nothing to retrieve from the URL");	
				}

		}elsif(param('code')){
				$text = param('code');
				print $text;
				@single_comments = get_single_comments($text);
					#print br(), h6("<br>Single comments are:<br> "), join("<br> ", @single_comments); 						
				@multiline_comments = get_multiline_comments($text);
					#print br(), h6("<br>Multi-line comments are:<br> "), join("<br>", @multiline_comments); 
					 
				$nonempty_comments_num = count_nonempty_comments();
					

				print br(), h6("Non-trivial comments numbers: ");
				$non_trivial_comments_num = count_nontrivial_comments();
					#print "<br>total non-trivial comments: ", $non_trivial_comments_num;
					
				print br(),br(), h6("All words in all comments: <br>");
					
					# $_ =~ s/(lt|br|gt)//g; # replace <br>
				$comment_words_num = get_comment_words("@single_comments"."@multiline_comments");

				print br(), h4("After removing comments, # of rest program code lines: ");
				$instruction_lines_num = count_instruction_lines_num($text);
				print "Line numbers: ",$instruction_lines_num, br();


				print br(), h6("elements in instructions: <br>");
				$instruction_elements_num = count_elements(get_program_words($text));
				print "Total: ", $instruction_elements_num, br();
				print join(", ", get_program_words($text));
			
				build_table();	
						
		}else{
				print h3("Error: nothing to retrieve from your input");
		}

	}else{
		print h3("Error: please only submit either a URL or a code snippet, input again please")
	}	
}

sub get_single_comments{	
	return undef if(@_<1);
	push @single_lines, $1 while $_[0] =~ /((\/\/|\#).*\b(\p{L}|\p{N})+)/g ;	
	return @single_lines;
}

sub get_multiline_comments{
	return undef if(@_<1);
	push @multi_lines, $& while $_[0] =~ /\/\*(?:.|\n)*?\*\//g;
	return @multi_lines;
}

sub count_single_line_comments{
	return undef if(@_<1);
	return scalar(@_);
}

sub count_multiline_comments{
	return undef if(@_<1);
	my $counter = 0;
	foreach(@_){
		while(/^((\b[(\p{L}|\p{N})]+\b)+.*|.*(\b[(\p{L}|\p{N})]+\b)+|.*(\b[(\p{L}|\p{N})]+\b)+.*)$/gm){
			$counter++;
		} 
	}
	# match one-line comment with at least one word characters
	print br(),"contains ", $counter, " lines of non-empty comment";
	return $counter;
}

sub count_nonempty_comments{
	return count_single_line_comments(@single_comments)
			+ count_multiline_comments(@multiline_comments);
}

sub count_non_trivial{		
	return undef if(@_<1);
	my $counter = 0;
	my @non_trivial;

	foreach (@_) {	
	 	while(/\b[(\p{L}|\p{N})]+\b/g){		
	    		$counter++;
			}
		if($counter >= 5){			
			 print "comment: \"",$_, "\", \nwords: ", $counter, br();
			 push @non_trivial, $_;
			}
		$counter = 0;
	}
	return @non_trivial;
}

sub count_nontrivial_comments{
	return scalar(count_non_trivial(@single_comments)) 
			+ scalar(count_non_trivial(@multiline_comments));
}

sub get_comment_words{
	return undef if(@_<1);
	my $words;
	$_ = @_[0];
	while(/\b[(\p{L}|\p{N})]+\b/g) {print $&, ", "; $words++;}
	return $words;
}

sub remove_comments{
	return undef if(@_<1);
	@_[0] =~ s/(((\/\/|\#).*\b(\p{L}|\p{N})+)|\/\*(?:.|\n)*?\*\/)//g;
}

sub count_instruction_lines_num{
	return undef if(@_<1);
	remove_comments(@_[0]);
	# match instruction with at least one element
	push @single_line, $& while @_[0] =~ /^((\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|])+.*|.*(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|])+|.*(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|])+.*)$/gm;
	return scalar(@single_line);
}

sub get_program_words{
	return undef if(@_<1);
	my @programe_words;
	push @programe_words, $& while @_[0] =~ /(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|]+)/g ;
	return @programe_words;
}
					
sub count_elements{
	return undef if(@_<1);
    my $word_num = 0;
 	
	for(@_){
		$word_num++;
	}						
	return $word_num;
}



sub build_table{
	print h4("Analysis"), "\n";
	print start_table ({- border => 2,
					    - width => '70%' });
	print caption ("Code Analysis");
	
	print Tr(td('Number of lines of instruction'), td($instruction_lines_num));
	print Tr(td('Number of elements of instruction'), td($instruction_elements_num));
	print Tr(td('Number of non-empty lines of comment'), td($nonempty_comments_num));
	print Tr(td('Number of non-trivial comments'), td($non_trivial_comments_num));
	print Tr(td('Number of words of comment'), td($comment_words_num));
	if($instruction_lines_num != 0){
		print Tr(td('Ratio of lines of comment to lines of instruction'), td(sprintf("%.1f", $nonempty_comments_num/$instruction_lines_num)));
		print Tr(td('Ratio of non-trivial comments to lines of instruction'), td(sprintf("%.1f", $non_trivial_comments_num/$instruction_lines_num)));
	}else{
		print Tr(td('Ratio of lines of comment to lines of instruction'), td("NAN"));
		print Tr(td('Ratio of non-trivial comments to lines of instruction'), td("NAN"));
	}
	if($instruction_elements_num != 0){
		print Tr(td('Ratio of words of comment to elements of instruction'), td( sprintf("%.1f", $comment_words_num/$instruction_elements_num)));
	}else{
		print Tr(td('Ratio of words of comment to elements of instruction'), td("NAN"));	
	}
	print end_table;
}

print end_html ;