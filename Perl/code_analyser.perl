#!/usr/bin/perl
# Author: Yuhao Wu
# CGI Perl script

use CGI qw(-utf-8 :all *table);
use LWP::Simple qw(get);
binmode(STDOUT, ":encoding(utf-8)");

print header(- charset =>'utf-8 '), "\n",
	  start_html ({- title =>'Code Analysis',
	      		   - author =>'rhaegar425@gmail.com'});


print start_form({-method=>"POST",
                  -action=>"http://cgi.csc.liv.ac.uk/cgi-bin/cgiwrap/x7yw2/analysis"});
print h5("Input URL "), "\n";
# print label("URL: ");
print textfield({-name=>'URL',
			 	 -size=>150}), "\n";
print br(), "\n";
print h5("Input Code"), "\n";
# print label("Code: ");
print textarea({-name =>'code',
	            #-default=>'[Enter anything you want here]',
				-rows => 15,
				-cols => 100});
print br(), "\n";
print br(), submit({-name =>'submit',
			  		-value =>'Submit'}), "\n";
print end_form;


$instruction_lines = 0;
$instruction_elements = 0;
$nonempty_comments = 0; # sum of the numbers of single-line comments and multi-line comments
$non_trivial_comments = 0;
$comment_words = 0;
$comment_to_instruction_ratio = 0;
$nontrivial_comment_to_instruction_ratio = 0;
$comment_word_to_instruction_element_ratio = 0;

if(param('submit')){

	if((param('URL') && !param('code')) || (param('code') && !param('URL'))){

		if (param('URL')) {

				# This branch is executed if the user first visits this page / script, 
				# input username is undef
				# This branch is executed if the client request is generated by the form
				
				# Retrieve content from URL here and assign it to $text
				$text = get(param('URL'));
				if(defined($text)){ # No assignment, defined() -> false
					print h6("Content of ".param('URL')), "\n";
					#$text =~ s/\)/\)<br>/g; # not work??? need HTML linebreak tags
					#print "Print with linebreak and escapeHTML(only br works in HTML):\n",$text;
					# $text =~ s/\b(lt|br|gt)\b/<br>/g;
					print $text;

					
					push @single_comments , $1 while $text =~ /((\/\/|\#).*\b(\p{L}|\p{N})+)/g ;
					print br(), h6("<br>Single comments are:<br> "), join("<br> ", @single_comments); 
					remove_tag_word(@single_comments);

					push @multiline_comments_without_linebreak, $& while $text =~ /\/\*(?:.|\n)*?\*\//g;
					#@multiline_comments = split(//,)
					# $comments_concat = "@multiline_comments_without_linebreak";
					# @multiline_comments = split(/\*\/|.$/m,$comments_concat);
					
					print br(), h6("<br>Multi-line comments are:<br> "), join("<br>", @multiline_comments_without_linebreak); 
					remove_tag_word(@multiline_comments_without_linebreak);
					$nonempty_comments = scalar(@single_comments) 
									+ count_comment_lines(@multiline_comments_without_linebreak);
					

					print br(), h6("Non-trivial comments numbers: ");
					$non_trivial_comments = scalar(count_trivial(@single_comments)) 
							+ scalar(count_trivial(@multiline_comments_without_linebreak));
					print "<br>total non-trivial comments: ", $non_trivial_comments;
					
					print br(),br(), h6("All words in all comments: <br>");
					$_ = "@single_comments"."@multiline_comments_without_linebreak";
					# $_ =~ s/(lt|br|gt)//g; # replace <br>
					while(/\b[(\p{L}|\p{N})]+\b/g) {print $&, ", "; $comment_words++; } 

					print br(), h6("Complete code"), br(), $text;
					print br(), h6("Rest program code: "), br();
					print "-----------Line numbers------- ", count_instruction_lines(),br(), $text, br();


					print br(), h6("elements in instructions: <br>");
					push @programe_elements , $& while $text =~ /(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|]+)/g ;
					print "Total: ", count_elements(@programe_elements), br();
					print join(", ", @programe_elements);
						
					table();
				}else{
					print h3("Error: nothing to retrieve from the URL");	
				}

			}elsif(param('code')){
				$text = param('code');
				print $text;

					
					push @single_comments , $1 while $text =~ /((\/\/|\#).*\b(\p{L}|\p{N})+)/g ;
					print br(), h6("<br>Single comments are:<br> "), join("<br> ", @single_comments); 
					remove_tag_word(@single_comments);

					push @multiline_comments_without_linebreak, $& while $text =~ /\/\*(?:.|\n)*?\*\//g;
					#@multiline_comments = split(//,)
					# $comments_concat = "@multiline_comments_without_linebreak";
					# @multiline_comments = split(/\*\/|.$/m,$comments_concat);
					
					print br(), h6("<br>Multi-line comments are:<br> "), join("<br>", @multiline_comments_without_linebreak); 
					remove_tag_word(@multiline_comments_without_linebreak);
					$nonempty_comments = scalar(@single_comments) 
									+ count_comment_lines(@multiline_comments_without_linebreak);
					

					print br(), h6("Non-trivial comments numbers: ");
					$non_trivial_comments = scalar(count_trivial(@single_comments)) 
							+ scalar(count_trivial(@multiline_comments_without_linebreak));
					print "<br>total non-trivial comments: ", $non_trivial_comments;
					
					print br(),br(), h6("All words in all comments: <br>");
					$_ = "@single_comments"."@multiline_comments_without_linebreak";
					# $_ =~ s/(lt|br|gt)//g; # replace <br>
					while(/\b[(\p{L}|\p{N})]+\b/g) {print $&, ", "; $comment_words++; } 

					print br(), h6("Complete code"), br(), $text;
					print br(), h6("Rest program code: "), br();
					print "-----------Line numbers------- ", count_instruction_lines(),br(), $text, br();


					print br(), h6("elements in instructions: <br>");
					push @programe_elements , $& while $text =~ /(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|]+)/g ;
					print "Total: ", count_elements(@programe_elements), br();
					print join(", ", @programe_elements);

			   	table();
				
			}else{
				print h3("Error: nothing to retrieve from your input");
			}

		}else{
		print h3("Error: please only submit either a URL or a code snippet, input again please")
	}	
}


sub remove_tag_word{
	return undef if(@_<1);
	foreach (@_){
		$_ =~ s/\b(lt|li|br|gt)\b//g; # replace < br > 
	}
}


sub remove_comment{
	$text =~ s/(((\/\/|\#).*\b(\p{L}|\p{N})+)|\/\*(?:.|\n)*?\*\/)//g;
	# $text =~ s/\b(lt|li|br|gt)\b/<br>/g;
}

sub count_comment_lines{
	my $counter = 0;
	foreach(@_){
		while(/^((\b[(\p{L}|\p{N})]+\b)+.*|.*(\b[(\p{L}|\p{N})]+\b)+|.*(\b[(\p{L}|\p{N})]+\b)+.*)$/gm){
			$counter++;
		} 
	}
	# match one-line comment with at least one word characters
	
	print br(),"contains ", $counter, " lines of non-empty comment";
	return $counter;
}

sub count_instruction_lines{
	remove_comment();
	remove_tag_word(@_);
	# match instruction with at least one element
	push @single_line, $& while $text =~ /^((\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|])+.*|.*(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|])+|.*(\b(?!\d)[\w]+\b|[-\+\*\%\!\=\>\<\&\|])+.*)$/gm;
	$instruction_lines = scalar(@single_line);
	return $instruction_lines;
}

sub count_elements{
	return undef if(@_<1);
	my $word_num = 0;
	# remove_tag_word(@_);
	
	for(@_){
		$word_num++;
	}
	$instruction_elements = $word_num;
	return $instruction_elements;
}

sub count_trivial{		
	return undef if(@_<1);
	my $counter = 0;
	my @non_trivial;

	foreach (@_) {	
	 	while(/\b[(\p{L}|\p{N})]+\b/g){		
	    		$counter++;
			}
		if($counter >= 5){			
			 print "comment: \"",$_, "\", \nwords: ", $counter, br();
			 push @non_trivial, $_;
			}
		$counter = 0;
	}
	return @non_trivial;
}

sub table{
	print h4("Analysis"), "\n";
	print start_table ({- border => 2,
					    - width => '70%' });
	print caption ("Code Analysis");
	
	print Tr(td('Number of lines of instruction'), td($instruction_lines));
	print Tr(td('Number of elements of instruction'), td($instruction_elements));
	print Tr(td('Number of non-empty lines of comment'), td($nonempty_comments));
	print Tr(td('Number of non-trivial comments'), td($non_trivial_comments));
	print Tr(td('Number of words of comment'), td($comment_words));
	if($instruction_lines != 0){
		print Tr(td('Ratio of lines of comment to lines of instruction'), td(sprintf("%.1f", $nonempty_comments/$instruction_lines)));
		print Tr(td('Ratio of non-trivial comments to lines of instruction'), td(sprintf("%.1f", $non_trivial_comments/$instruction_lines)));
	}else{
		print Tr(td('Ratio of lines of comment to lines of instruction'), td("NAN"));
		print Tr(td('Ratio of non-trivial comments to lines of instruction'), td("NAN"));
	}
	if($instruction_elements != 0){
		print Tr(td('Ratio of words of comment to elements of instruction'), td( sprintf("%.1f", $comment_words/$instruction_elements)));
	}else{
		print Tr(td('Ratio of words of comment to elements of instruction'), td("NAN"));	
	}
	print end_table;
}

print end_html ;